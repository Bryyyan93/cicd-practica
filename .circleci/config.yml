#Circleci
version: 2.1
python: circleci/python@2.1.1

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: cimg/python:3.10.5

orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0    

jobs:
  test:
    <<: *defaults  
    steps:
      - checkout
      # Restaurar caché de dependencias de Python si existe
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-

      # Instalar dependencias
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install -r dev-requirements.txt 
            
      # Ejecutar lint
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            flake8 .       

      # Generar y guardar el archivo de cobertura             
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            coverage run -m pytest tests
            coverage xml -o coverage.xml

      # Escanear vulnerabilidades con gitGuardian
      - run:
          name: Run GitGuardian scan
          command: |
            . venv/bin/activate
            export GITGUARDIAN_API_KEY=$GITGUARDIAN_API_KEY
            ggshield secret scan repo .      

      - sonarcloud/scan

      # Guardar caché de dependencias
      - save_cache:
          paths:
            - venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # Almacenar coberura    
      - store_artifacts:
          path: coverage.xml
      - persist_to_workspace:
          root: ~/repo
          paths: 
            - . 
  create_release:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Set VERSION_TAG
          command: | 
            echo "VERSION_TAG=$(echo $CIRCLE_SHA1 | cut -c -7)" >> $BASH_ENV       
      - run:
          name: Create GitHub Release
          command: |
            # Toma los primeros 7 caracteres del hash del commit para el nombre de la versión
            VERSION_TAG=$(echo $CIRCLE_SHA1 | cut -c -7)
            # Guarda VERSION_TAG
            echo "VERSION_TAG=$VERSION_TAG" >> $BASH_ENV  

            curl -u $GITHUB_USER:$GITHUB_TOKEN -X POST \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$GITHUB_USER/cicd-practica/releases \
              -d '{"tag_name":"'"$VERSION_TAG"'","name":"'"$VERSION_TAG"'","body":"feat: Despliegue con Argocd","draft":false,"prerelease":false}'             
  publish_github:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Set VERSION_TAG
          command: | 
            echo "VERSION_TAG=$(echo $CIRCLE_SHA1 | cut -c -7)" >> $BASH_ENV        
      - run:
          name: Generate artifact
          command: |
            mkdir -p artifacts
            zip -r artifacts/app.zip .
      - store_artifacts:
          path: artifacts/app.zip
      - run:
          name: Get Release ID
          command: |  
            # Obtener el ID del release usando el tag
            RELEASE_ID=$(curl -s -u $GITHUB_USER:$GITHUB_TOKEN \
            https://api.github.com/repos/$GITHUB_USER/cicd-practica/releases/tags/$VERSION_TAG | jq -r .id)
            echo "RELEASE_ID=$RELEASE_ID" >> $BASH_ENV
      - run:
          name: Publish to GitHub Packages
          command: |
            # Publicar el artefacto en el release de GitHub
            curl -u $GITHUB_USER:$GITHUB_TOKEN \
            -H "Content-Type: application/zip" \
            --data-binary @artifacts/app.zip \
            "https://uploads.github.com/repos/$GITHUB_USER/cicd-practica/releases/${RELEASE_ID}/assets?name=app-${VERSION_TAG}.zip"
  docker_image:           
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Set VERSION_TAG
          command: | 
            echo "VERSION_TAG=$(echo $CIRCLE_SHA1 | cut -c -7)" >> $BASH_ENV            
      # Build Docker image
      - setup_remote_docker:
          version: 20.10.24
      # Autenticarse en Docker Hub
      - run:
          name: Docker Hub Login
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
      
      - run: ls -la ~/repo
      # Construcción de la imagen
      - run:
          name: Build Docker Image
          command: docker build -t myapp:${VERSION_TAG} .
      # Etiquetado y subida a Docker Hub
      - run:
          name: Tag and Push Image
          command: |
            docker tag myapp:${VERSION_TAG} $DOCKERHUB_USERNAME/myapp:${VERSION_TAG}
            docker push $DOCKERHUB_USERNAME/myapp:${VERSION_TAG}
            
  # iniciar sesión en el servidor y sincronizar la aplicación
  deploy_to_argocd:
    <<: *defaults
    docker:
      - image: bitnami/kubectl:latest  # Imagen con `kubectl` instalado
    steps:
      - attach_workspace:
          at: ~/repo  
      - run:
          name: Apply Application Manifest in ArgoCD
          command: |
            kubectl apply -f application.yaml -n argocd

workflows:
  test-deploy:
    jobs:
      - test:
          context: dev
      - create_release:
          context: dev
          requires:
            - test    
      - publish_github:
          context: dev
          requires:
            - create_release
          filters:
            branches:
              only:
                - main
      - docker_image:
          context: dev
          requires:
            - create_release
          filters:
            branches:
              only:
                - main
      - deploy_to_argocd:
          context: dev
          requires:
            - test
            - docker_image
          filters:
            branches:
              only:
                - main                 
